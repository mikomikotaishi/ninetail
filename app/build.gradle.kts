/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    java
    application
    kotlin("jvm") version "2.1.10"
    id("io.freefair.lombok") version "8.13.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven(url = "https://jitpack.io")
    maven(url = "https://maven.lavalink.dev/releases")
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

    // Jakarta
    implementation("jakarta.annotation:jakarta.annotation-api:+")
    implementation("jakarta.json:jakarta.json-api:+")

    // Kotlin
    implementation(kotlin("stdlib"))
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:+"))
    implementation("org.jetbrains.kotlin:kotlin-stdlib:+")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:+")

    // Lombok
    implementation("org.projectlombok:lombok:+")

    // JSON
    implementation("org.eclipse.parsson:parsson:+")

    // JDA
    implementation("net.dv8tion:JDA:+")

    // Jackson dependencies (required by JDA)
    implementation("com.fasterxml.jackson.core:jackson-core:+")
    implementation("com.fasterxml.jackson.core:jackson-databind:+")
    implementation("com.fasterxml.jackson.core:jackson-annotations:+")

    // Audio
    implementation("dev.arbjerg:lavaplayer:+")
    implementation("dev.lavalink.youtube:common:+")

    // SLF4J
    implementation("org.slf4j:slf4j-api:+")
    implementation("org.slf4j:slf4j-simple:+")

    // PostgreSQL JDBC driver
    implementation("org.postgresql:postgresql:+")

    // HikariCP
    implementation("com.zaxxer:HikariCP:+")

    // Testing
    implementation("org.mockito:mockito-core:+")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
    modularity.inferModulePath = true 
}

application {
    // Define the main class for the application.
    mainModule = "bot.ninetail"
    mainClass = "bot.ninetail.core.Main"
    applicationDefaultJvmArgs = listOf(
        "--enable-preview",
        "--add-modules", "ALL-MODULE-PATH",
        "--add-reads", "bot.ninetail=ALL-UNNAMED"
    )
}

tasks.withType<JavaCompile>().configureEach {
    options.compilerArgs.addAll(listOf(
        "--enable-preview",
        "--add-reads", "bot.ninetail=ALL-UNNAMED"
    ))
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType<JavaExec> {
    jvmArgs = listOf(
        "--enable-preview", 
        "--add-reads", "bot.ninetail=ALL-UNNAMED",
        "--add-modules", "ALL-MODULE-PATH",
        "--patch-module", "bot.ninetail=./build/classes/java/main"
    )
}

tasks.jar {
    manifest {
        attributes(
            "Main-Class" to "bot.ninetail.core.Main",
            "Automatic-Module-Name" to "bot.ninetail"
        )
    }
}

// spotless {
//     java {
//         importOrder 'java', 'javax', 'jakarta', 'bot.ninetail', ''
//     }
// }
